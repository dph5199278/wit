
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 16 17:13:14 EDT 2017
//----------------------------------------------------

package mondrian.olap;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.Symbol;
import mondrian.mdx.UnresolvedFunCall;
import mondrian.parser.MdxParserValidator;
import mondrian.resource.MondrianResource;
import mondrian.server.Statement;

/** CUP v0.10k generated parser.
  * @version Tue May 16 17:13:14 EDT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\045\003\000\002\047" +
    "\003\000\002\046\003\000\002\046\003\000\002\044\003" +
    "\000\002\044\003\000\002\043\003\000\002\043\003\000" +
    "\002\034\003\000\002\034\005\000\002\032\003\000\002" +
    "\032\005\000\002\035\003\000\002\021\003\000\002\021" +
    "\005\000\002\021\005\000\002\017\003\000\002\017\005" +
    "\000\002\016\003\000\002\016\004\000\002\015\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\006\000\002\015" +
    "\005\000\002\015\006\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\013\003\000" +
    "\002\013\005\000\002\013\005\000\002\011\003\000\002" +
    "\011\004\000\002\011\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\010\000\002\023\006\000" +
    "\002\023\006\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\023\003\000\002\005\007\000\002\022" +
    "\002\000\002\022\003\000\002\077\002\000\002\077\004" +
    "\000\002\101\006\000\002\006\002\000\002\006\004\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\007" +
    "\005\000\002\007\003\000\002\007\003\000\002\010\003" +
    "\000\002\010\002\000\002\070\002\000\002\070\003\000" +
    "\002\067\003\000\002\067\005\000\002\004\005\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\004\000\002\025\011\000\002\100\002\000\002\100\004" +
    "\000\002\061\002\000\002\061\003\000\002\060\003\000" +
    "\002\060\005\000\002\024\002\000\002\024\004\000\002" +
    "\063\002\000\002\063\003\000\002\071\003\000\002\071" +
    "\004\000\002\052\003\000\002\052\003\000\002\050\007" +
    "\000\002\050\007\000\002\064\002\000\002\064\004\000" +
    "\002\072\003\000\002\072\005\000\002\037\003\000\002" +
    "\053\005\000\002\051\006\000\002\051\006\000\002\040" +
    "\003\000\002\003\007\000\002\003\007\000\002\057\002" +
    "\000\002\057\004\000\002\066\002\000\002\066\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\102\003\000\002\102" +
    "\006\000\002\065\005\000\002\055\002\000\002\055\003" +
    "\000\002\073\003\000\002\073\005\000\002\056\003\000" +
    "\002\036\003\000\002\012\003\000\002\062\005\000\002" +
    "\054\002\000\002\054\003\000\002\074\003\000\002\074" +
    "\005\000\002\033\003\000\002\030\007\000\002\103\004" +
    "\000\002\103\002\000\002\104\004\000\002\104\002\000" +
    "\002\075\004\000\002\075\002\000\002\076\003\000\002" +
    "\076\005\000\002\020\003\000\002\027\003\000\002\027" +
    "\003\000\002\031\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\014\015\005\021\012\045\uffaf\053\010\054" +
    "\014\001\002\000\004\002\uffb4\001\002\000\012\022\uff79" +
    "\030\325\045\uff79\053\uff79\001\002\000\004\002\324\001" +
    "\002\000\004\045\241\001\002\000\006\031\210\046\206" +
    "\001\002\000\004\002\uffb3\001\002\000\004\040\176\001" +
    "\002\000\004\002\uffb2\001\002\000\036\007\044\010\024" +
    "\014\033\033\020\034\047\041\026\066\022\070\021\072" +
    "\042\074\015\100\032\101\023\102\037\104\027\001\002" +
    "\000\030\007\044\010\024\014\033\034\047\041\026\066" +
    "\022\070\021\100\032\101\023\102\037\104\027\001\002" +
    "\000\120\002\uffd7\004\uffd7\005\uffd7\011\uffd7\014\uffd7\016" +
    "\uffd7\020\uffd7\025\uffd7\026\uffd7\027\uffd7\031\uffd7\033\uffd7" +
    "\035\uffd7\036\uffd7\041\uffd7\042\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\052\uffd7\055\uffd7\056\ufff6\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\067\uffd7\070" +
    "\ufff6\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7" +
    "\077\uffd7\001\002\000\114\002\uffcd\004\uffcd\005\uffcd\011" +
    "\uffcd\014\uffcd\016\uffcd\020\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\031\uffcd\033\uffcd\035\uffcd\036\uffcd\041\uffcd\042\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd\055\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\067" +
    "\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd" +
    "\077\uffcd\001\002\000\036\007\044\010\024\014\033\033" +
    "\020\034\047\041\026\066\022\070\021\072\042\074\015" +
    "\100\032\101\023\102\037\104\027\001\002\000\040\007" +
    "\044\010\024\014\033\033\020\034\047\041\026\060\uffba" +
    "\066\022\070\021\072\042\074\015\100\032\101\023\102" +
    "\037\104\027\001\002\000\042\007\044\010\024\014\033" +
    "\033\020\034\047\041\026\060\uffba\066\022\070\021\072" +
    "\042\074\015\075\uffb9\100\032\101\023\102\037\104\027" +
    "\001\002\000\122\002\ufffe\004\ufffe\005\ufffe\011\ufffe\014" +
    "\ufffe\016\ufffe\020\ufffe\025\ufffe\026\ufffe\027\ufffe\031\ufffe" +
    "\033\ufffe\035\ufffe\036\ufffe\041\ufffe\042\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065" +
    "\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe" +
    "\075\ufffe\076\ufffe\077\ufffe\001\002\000\004\070\164\001" +
    "\002\000\006\056\157\070\160\001\002\000\122\002\ufff9" +
    "\004\ufff9\005\ufff9\011\ufff9\014\ufff9\016\ufff9\020\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\031\ufff9\033\ufff9\035\ufff9\036\ufff9" +
    "\041\ufff9\042\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9" +
    "\001\002\000\114\002\uffd9\004\uffd9\005\uffd9\011\uffd9\014" +
    "\uffd9\016\uffd9\020\uffd9\025\uffd9\026\uffd9\027\uffd9\031\uffd9" +
    "\033\uffd9\035\uffd9\036\uffd9\041\uffd9\042\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\052\uffd9\055\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\067\uffd9\071" +
    "\uffd9\072\uffd9\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9" +
    "\001\002\000\010\002\uffb1\005\070\057\071\001\002\000" +
    "\042\002\uffbc\005\uffbc\011\uffbc\014\uffbc\031\uffbc\035\uffbc" +
    "\036\073\041\uffbc\042\uffbc\045\uffbc\046\uffbc\052\074\057" +
    "\uffbc\060\uffbc\075\uffbc\076\uffbc\001\002\000\114\002\uffd8" +
    "\004\uffd8\005\uffd8\011\uffd8\014\uffd8\016\uffd8\020\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\031\uffd8\033\uffd8\035\uffd8\036\uffd8" +
    "\041\uffd8\042\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052" +
    "\uffd8\055\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\065\uffd8\067\uffd8\071\uffd8\072\uffd8\073\uffd8\074" +
    "\uffd8\075\uffd8\076\uffd8\077\uffd8\001\002\000\122\002\ufffa" +
    "\004\ufffa\005\ufffa\011\ufffa\014\ufffa\016\ufffa\020\ufffa\025" +
    "\ufffa\026\ufffa\027\ufffa\031\ufffa\033\ufffa\035\ufffa\036\ufffa" +
    "\041\ufffa\042\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\065\ufffa\067\ufffa\070\ufffa\071" +
    "\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa" +
    "\001\002\000\112\002\uffdf\004\uffdf\005\uffdf\011\uffdf\014" +
    "\uffdf\016\uffdf\020\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf" +
    "\033\uffdf\035\uffdf\036\uffdf\041\uffdf\042\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\052\uffdf\055\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\063\uffdf\064\uffdf\065\uffdf\067\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\001\002" +
    "\000\036\002\uffbd\005\uffbd\011\uffbd\014\uffbd\031\uffbd\035" +
    "\uffbd\041\uffbd\042\uffbd\045\uffbd\046\uffbd\057\uffbd\060\uffbd" +
    "\075\uffbd\076\uffbd\001\002\000\112\002\uffe3\004\uffe3\005" +
    "\uffe3\011\uffe3\014\uffe3\016\uffe3\020\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\031\uffe3\033\uffe3\035\uffe3\036\uffe3\041\uffe3\042" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3\055\107" +
    "\057\uffe3\060\uffe3\061\uffe3\063\uffe3\064\uffe3\065\uffe3\067" +
    "\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3" +
    "\077\110\001\002\000\122\002\000\004\000\005\000\011" +
    "\000\014\000\016\000\020\000\025\000\026\000\027\000" +
    "\031\000\033\000\035\000\036\000\041\000\042\000\045" +
    "\000\046\000\047\000\050\000\051\000\052\000\055\000" +
    "\056\000\057\000\060\000\061\000\062\000\063\000\064" +
    "\000\065\000\067\000\070\000\071\000\072\000\073\000" +
    "\074\000\075\000\076\000\077\000\001\002\000\054\002" +
    "\ufff3\004\076\005\ufff3\011\ufff3\014\ufff3\016\ufff3\020\ufff3" +
    "\031\ufff3\035\ufff3\036\ufff3\041\ufff3\042\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\050\ufff3\052\ufff3\057\ufff3\060\ufff3\075\ufff3" +
    "\076\ufff3\001\002\000\054\002\ufff0\004\ufff0\005\ufff0\011" +
    "\ufff0\014\ufff0\016\ufff0\020\ufff0\031\ufff0\035\ufff0\036\ufff0" +
    "\041\ufff0\042\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\052" +
    "\ufff0\057\ufff0\060\ufff0\075\ufff0\076\ufff0\001\002\000\030" +
    "\007\044\010\024\014\033\034\047\041\026\066\022\070" +
    "\021\100\032\101\023\102\037\104\027\001\002\000\100" +
    "\002\uffee\004\uffee\005\uffee\011\uffee\014\uffee\016\uffee\020" +
    "\uffee\025\131\026\143\027\140\031\uffee\033\137\035\uffee" +
    "\036\uffee\041\uffee\042\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\052\uffee\057\uffee\060\uffee\063\134\064\133\065\136" +
    "\067\135\071\142\073\141\075\uffee\076\uffee\001\002\000" +
    "\044\007\044\010\024\014\033\016\uffcb\020\uffcb\033\020" +
    "\034\047\041\026\050\uffcb\066\022\070\021\072\042\074" +
    "\015\100\032\101\023\102\037\104\027\001\002\000\106" +
    "\002\uffec\004\uffec\005\uffec\011\uffec\014\uffec\016\uffec\020" +
    "\uffec\025\uffec\026\uffec\027\uffec\031\uffec\033\uffec\035\uffec" +
    "\036\uffec\041\uffec\042\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\052\uffec\057\uffec\060\uffec\061\104\063\uffec\064\uffec" +
    "\065\uffec\067\uffec\071\uffec\072\105\073\uffec\074\103\075" +
    "\uffec\076\uffec\001\002\000\114\002\uffdc\004\uffdc\005\uffdc" +
    "\011\uffdc\014\uffdc\016\uffdc\020\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\031\uffdc\033\uffdc\035\uffdc\036\uffdc\041\uffdc\042\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\052\uffdc\055\uffdc\057" +
    "\uffdc\060\uffdc\061\uffdc\062\053\063\uffdc\064\uffdc\065\uffdc" +
    "\067\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076" +
    "\uffdc\077\uffdc\001\002\000\114\002\uffce\004\uffce\005\uffce" +
    "\011\uffce\014\uffce\016\uffce\020\uffce\025\uffce\026\uffce\027" +
    "\uffce\031\uffce\033\uffce\035\uffce\036\uffce\041\uffce\042\uffce" +
    "\045\uffce\046\uffce\047\uffce\050\uffce\052\uffce\055\uffce\057" +
    "\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\067\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076" +
    "\uffce\077\uffce\001\002\000\122\002\ufffd\004\ufffd\005\ufffd" +
    "\011\ufffd\014\ufffd\016\ufffd\020\ufffd\025\ufffd\026\ufffd\027" +
    "\ufffd\031\ufffd\033\ufffd\035\ufffd\036\ufffd\041\ufffd\042\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd" +
    "\064\ufffd\065\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\001\002\000\122" +
    "\002\ufffc\004\ufffc\005\ufffc\011\ufffc\014\ufffc\016\ufffc\020" +
    "\ufffc\025\ufffc\026\ufffc\027\ufffc\031\ufffc\033\ufffc\035\ufffc" +
    "\036\ufffc\041\ufffc\042\ufffc\045\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\052\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\067\ufffc\070" +
    "\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc" +
    "\077\ufffc\001\002\000\122\002\ufffb\004\ufffb\005\ufffb\011" +
    "\ufffb\014\ufffb\016\ufffb\020\ufffb\025\ufffb\026\ufffb\027\ufffb" +
    "\031\ufffb\033\ufffb\035\ufffb\036\ufffb\041\ufffb\042\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\065\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\077\ufffb\001\002\000\014\014" +
    "\033\041\026\101\023\102\037\103\060\001\002\000\114" +
    "\002\uffd4\004\uffd4\005\uffd4\011\uffd4\014\uffd4\016\uffd4\020" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\033\uffd4\035\uffd4" +
    "\036\uffd4\041\uffd4\042\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\052\uffd4\055\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\067\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\001\002\000\004" +
    "\070\061\001\002\000\116\002\uffd6\004\uffd6\005\uffd6\011" +
    "\uffd6\014\uffd6\016\uffd6\020\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\031\uffd6\033\uffd6\035\uffd6\036\uffd6\041\uffd6\042\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6\055\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065\uffd6\067" +
    "\uffd6\070\ufffc\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\001\002\000\116\002\uffd5\004\uffd5\005" +
    "\uffd5\011\uffd5\014\uffd5\016\uffd5\020\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\031\uffd5\033\uffd5\035\uffd5\036\uffd5\041\uffd5\042" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5\055\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\067\uffd5\070\ufffb\071\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\075\uffd5\076\uffd5\077\uffd5\001\002\000\114\002\uffff\004" +
    "\uffff\005\uffff\011\uffff\014\uffff\016\uffff\020\uffff\025\uffff" +
    "\026\uffff\027\uffff\031\uffff\033\uffff\035\uffff\036\uffff\041" +
    "\uffff\042\uffff\045\uffff\046\uffff\047\uffff\050\uffff\052\uffff" +
    "\055\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\065\uffff\067\uffff\071\uffff\072\uffff\073\uffff\074\uffff" +
    "\075\uffff\076\uffff\077\uffff\001\002\000\042\007\044\010" +
    "\024\014\033\033\020\034\047\041\026\060\uffba\066\022" +
    "\070\021\072\042\074\015\076\uffb9\100\032\101\023\102" +
    "\037\104\027\001\002\000\004\076\102\001\002\000\006" +
    "\075\uffb8\076\uffb8\001\002\000\014\005\070\057\071\060" +
    "\uffbb\075\uffb7\076\uffb7\001\002\000\004\060\066\001\002" +
    "\000\040\007\044\010\024\014\033\033\020\034\047\041" +
    "\026\060\uffba\066\022\070\021\072\042\074\015\100\032" +
    "\101\023\102\037\104\027\001\002\000\006\075\uffb6\076" +
    "\uffb6\001\002\000\012\014\033\041\026\101\023\102\037" +
    "\001\002\000\036\007\044\010\024\014\033\033\020\034" +
    "\047\041\026\066\022\070\021\072\042\074\015\100\032" +
    "\101\023\102\037\104\027\001\002\000\042\002\uffbe\005" +
    "\uffbe\011\uffbe\014\uffbe\031\uffbe\035\uffbe\036\073\041\uffbe" +
    "\042\uffbe\045\uffbe\046\uffbe\052\074\057\uffbe\060\uffbe\075" +
    "\uffbe\076\uffbe\001\002\000\036\007\044\010\024\014\033" +
    "\033\020\034\047\041\026\066\022\070\021\072\042\074" +
    "\015\100\032\101\023\102\037\104\027\001\002\000\036" +
    "\007\044\010\024\014\033\033\020\034\047\041\026\066" +
    "\022\070\021\072\042\074\015\100\032\101\023\102\037" +
    "\104\027\001\002\000\054\002\ufff1\004\076\005\ufff1\011" +
    "\ufff1\014\ufff1\016\ufff1\020\ufff1\031\ufff1\035\ufff1\036\ufff1" +
    "\041\ufff1\042\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\052" +
    "\ufff1\057\ufff1\060\ufff1\075\ufff1\076\ufff1\001\002\000\036" +
    "\007\044\010\024\014\033\033\020\034\047\041\026\066" +
    "\022\070\021\072\042\074\015\100\032\101\023\102\037" +
    "\104\027\001\002\000\054\002\uffef\004\uffef\005\uffef\011" +
    "\uffef\014\uffef\016\uffef\020\uffef\031\uffef\035\uffef\036\uffef" +
    "\041\uffef\042\uffef\045\uffef\046\uffef\047\uffef\050\uffef\052" +
    "\uffef\057\uffef\060\uffef\075\uffef\076\uffef\001\002\000\054" +
    "\002\ufff2\004\076\005\ufff2\011\ufff2\014\ufff2\016\ufff2\020" +
    "\ufff2\031\ufff2\035\ufff2\036\ufff2\041\ufff2\042\ufff2\045\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\052\ufff2\057\ufff2\060\ufff2\075" +
    "\ufff2\076\ufff2\001\002\000\036\002\uffb5\005\uffb5\011\uffb5" +
    "\014\uffb5\031\uffb5\035\uffb5\041\uffb5\042\uffb5\045\uffb5\046" +
    "\uffb5\057\uffb5\060\uffb5\075\uffb5\076\uffb5\001\002\000\114" +
    "\002\uffd3\004\uffd3\005\uffd3\011\uffd3\014\uffd3\016\uffd3\020" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\031\uffd3\033\uffd3\035\uffd3" +
    "\036\uffd3\041\uffd3\042\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\052\uffd3\055\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\067\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\001\002\000\034" +
    "\007\044\010\024\014\033\034\047\041\026\066\022\070" +
    "\021\072\042\074\015\100\032\101\023\102\037\104\027" +
    "\001\002\000\034\007\044\010\024\014\033\034\047\041" +
    "\026\066\022\070\021\072\042\074\015\100\032\101\023" +
    "\102\037\104\027\001\002\000\034\007\044\010\024\014" +
    "\033\034\047\041\026\066\022\070\021\072\042\074\015" +
    "\100\032\101\023\102\037\104\027\001\002\000\112\002" +
    "\uffe1\004\uffe1\005\uffe1\011\uffe1\014\uffe1\016\uffe1\020\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\031\uffe1\033\uffe1\035\uffe1\036" +
    "\uffe1\041\uffe1\042\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\052\uffe1\055\107\057\uffe1\060\uffe1\061\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\067\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\077\110\001\002\000\034\007\044\010" +
    "\024\014\033\034\047\041\026\066\022\070\021\072\042" +
    "\074\015\100\032\101\023\102\037\104\027\001\002\000" +
    "\034\007\044\010\024\014\033\034\047\041\026\066\022" +
    "\070\021\072\042\074\015\100\032\101\023\102\037\104" +
    "\027\001\002\000\112\002\uffdd\004\uffdd\005\uffdd\011\uffdd" +
    "\014\uffdd\016\uffdd\020\uffdd\025\uffdd\026\uffdd\027\uffdd\031" +
    "\uffdd\033\uffdd\035\uffdd\036\uffdd\041\uffdd\042\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\052\uffdd\055\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\063\uffdd\064\uffdd\065\uffdd\067\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\001" +
    "\002\000\112\002\uffde\004\uffde\005\uffde\011\uffde\014\uffde" +
    "\016\uffde\020\uffde\025\uffde\026\uffde\027\uffde\031\uffde\033" +
    "\uffde\035\uffde\036\uffde\041\uffde\042\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\052\uffde\055\uffde\057\uffde\060\uffde\061" +
    "\uffde\063\uffde\064\uffde\065\uffde\067\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\001\002\000" +
    "\112\002\uffe0\004\uffe0\005\uffe0\011\uffe0\014\uffe0\016\uffe0" +
    "\020\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0\033\uffe0\035" +
    "\uffe0\036\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\052\uffe0\055\107\057\uffe0\060\uffe0\061\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\067\uffe0\071\uffe0\072\uffe0\073\uffe0" +
    "\074\uffe0\075\uffe0\076\uffe0\077\110\001\002\000\112\002" +
    "\uffe2\004\uffe2\005\uffe2\011\uffe2\014\uffe2\016\uffe2\020\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\031\uffe2\033\uffe2\035\uffe2\036" +
    "\uffe2\041\uffe2\042\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\052\uffe2\055\107\057\uffe2\060\uffe2\061\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\067\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2" +
    "\075\uffe2\076\uffe2\077\110\001\002\000\014\016\uffca\020" +
    "\uffca\036\073\050\uffca\052\074\001\002\000\010\016\uffc9" +
    "\020\uffc9\050\uffc9\001\002\000\010\016\121\020\uffc6\050" +
    "\122\001\002\000\004\020\130\001\002\000\036\007\044" +
    "\010\024\014\033\033\020\034\047\041\026\066\022\070" +
    "\021\072\042\074\015\100\032\101\023\102\037\104\027" +
    "\001\002\000\036\007\044\010\024\014\033\033\020\034" +
    "\047\041\026\066\022\070\021\072\042\074\015\100\032" +
    "\101\023\102\037\104\027\001\002\000\010\016\uffc8\020" +
    "\uffc8\050\uffc8\001\002\000\010\036\073\047\125\052\074" +
    "\001\002\000\036\007\044\010\024\014\033\033\020\034" +
    "\047\041\026\066\022\070\021\072\042\074\015\100\032" +
    "\101\023\102\037\104\027\001\002\000\014\016\uffc7\020" +
    "\uffc7\036\073\050\uffc7\052\074\001\002\000\010\020\uffc5" +
    "\036\073\052\074\001\002\000\114\002\uffcc\004\uffcc\005" +
    "\uffcc\011\uffcc\014\uffcc\016\uffcc\020\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\031\uffcc\033\uffcc\035\uffcc\036\uffcc\041\uffcc\042" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\052\uffcc\055\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\067\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc" +
    "\076\uffcc\077\uffcc\001\002\000\034\007\044\010\024\014" +
    "\033\034\047\041\026\066\022\070\021\072\042\074\015" +
    "\100\032\101\023\102\037\104\027\001\002\000\034\007" +
    "\044\010\024\014\033\034\047\041\026\066\022\070\021" +
    "\072\042\074\015\100\032\101\023\102\037\104\027\001" +
    "\002\000\034\007\uffbf\010\uffbf\014\uffbf\034\uffbf\041\uffbf" +
    "\066\uffbf\070\uffbf\072\uffbf\074\uffbf\100\uffbf\101\uffbf\102" +
    "\uffbf\104\uffbf\001\002\000\034\007\uffc4\010\uffc4\014\uffc4" +
    "\034\uffc4\041\uffc4\066\uffc4\070\uffc4\072\uffc4\074\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\104\uffc4\001\002\000\034\007\uffc0" +
    "\010\uffc0\014\uffc0\034\uffc0\041\uffc0\066\uffc0\070\uffc0\072" +
    "\uffc0\074\uffc0\100\uffc0\101\uffc0\102\uffc0\104\uffc0\001\002" +
    "\000\034\007\uffc1\010\uffc1\014\uffc1\034\uffc1\041\uffc1\066" +
    "\uffc1\070\uffc1\072\uffc1\074\uffc1\100\uffc1\101\uffc1\102\uffc1" +
    "\104\uffc1\001\002\000\006\025\150\027\151\001\002\000" +
    "\034\007\044\010\024\014\033\034\047\041\026\066\022" +
    "\070\021\072\042\074\015\100\032\101\023\102\037\104" +
    "\027\001\002\000\034\007\uffc3\010\uffc3\014\uffc3\034\uffc3" +
    "\041\uffc3\066\uffc3\070\uffc3\072\uffc3\074\uffc3\100\uffc3\101" +
    "\uffc3\102\uffc3\104\uffc3\001\002\000\034\007\uffc2\010\uffc2" +
    "\014\uffc2\034\uffc2\041\uffc2\066\uffc2\070\uffc2\072\uffc2\074" +
    "\uffc2\100\uffc2\101\uffc2\102\uffc2\104\uffc2\001\002\000\036" +
    "\007\044\010\024\014\033\017\146\034\145\041\026\066" +
    "\022\070\021\072\042\074\015\100\032\101\023\102\037" +
    "\104\027\001\002\000\106\002\uffe9\004\uffe9\005\uffe9\011" +
    "\uffe9\014\uffe9\016\uffe9\020\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\031\uffe9\033\uffe9\035\uffe9\036\uffe9\041\uffe9\042\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\052\uffe9\057\uffe9\060\uffe9" +
    "\061\104\063\uffe9\064\uffe9\065\uffe9\067\uffe9\071\uffe9\072" +
    "\105\073\uffe9\074\103\075\uffe9\076\uffe9\001\002\000\114" +
    "\002\uffea\004\uffea\005\uffea\011\uffea\014\uffea\016\uffea\020" +
    "\uffea\025\uffea\026\uffea\027\uffea\031\uffea\033\uffea\035\uffea" +
    "\036\uffea\041\uffea\042\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\052\uffea\055\uffce\057\uffea\060\uffea\061\uffce\062\uffce" +
    "\063\uffea\064\uffea\065\uffea\067\uffea\071\uffea\072\uffce\073" +
    "\uffea\074\uffce\075\uffea\076\uffea\077\uffce\001\002\000\100" +
    "\002\uffe8\004\uffe8\005\uffe8\011\uffe8\014\uffe8\016\uffe8\020" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\033\uffe8\035\uffe8" +
    "\036\uffe8\041\uffe8\042\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\052\uffe8\057\uffe8\060\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\067\uffe8\071\uffe8\073\uffe8\075\uffe8\076\uffe8\001\002\000" +
    "\106\002\uffe7\004\uffe7\005\uffe7\011\uffe7\014\uffe7\016\uffe7" +
    "\020\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7\033\uffe7\035" +
    "\uffe7\036\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\052\uffe7\057\uffe7\060\uffe7\061\104\063\uffe7\064" +
    "\uffe7\065\uffe7\067\uffe7\071\uffe7\072\105\073\uffe7\074\103" +
    "\075\uffe7\076\uffe7\001\002\000\034\007\044\010\024\014" +
    "\033\034\047\041\026\066\022\070\021\072\042\074\015" +
    "\100\032\101\023\102\037\104\027\001\002\000\034\007" +
    "\044\010\024\014\033\034\047\041\026\066\022\070\021" +
    "\072\042\074\015\100\032\101\023\102\037\104\027\001" +
    "\002\000\106\002\uffe6\004\uffe6\005\uffe6\011\uffe6\014\uffe6" +
    "\016\uffe6\020\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6\033" +
    "\uffe6\035\uffe6\036\uffe6\041\uffe6\042\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\050\uffe6\052\uffe6\057\uffe6\060\uffe6\061\104\063" +
    "\uffe6\064\uffe6\065\uffe6\067\uffe6\071\uffe6\072\105\073\uffe6" +
    "\074\103\075\uffe6\076\uffe6\001\002\000\106\002\uffe4\004" +
    "\uffe4\005\uffe4\011\uffe4\014\uffe4\016\uffe4\020\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\031\uffe4\033\uffe4\035\uffe4\036\uffe4\041" +
    "\uffe4\042\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4" +
    "\057\uffe4\060\uffe4\061\104\063\uffe4\064\uffe4\065\uffe4\067" +
    "\uffe4\071\uffe4\072\105\073\uffe4\074\103\075\uffe4\076\uffe4" +
    "\001\002\000\106\002\uffeb\004\uffeb\005\uffeb\011\uffeb\014" +
    "\uffeb\016\uffeb\020\uffeb\025\uffeb\026\uffeb\027\uffeb\031\uffeb" +
    "\033\uffeb\035\uffeb\036\uffeb\041\uffeb\042\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\052\uffeb\057\uffeb\060\uffeb\061\104" +
    "\063\uffeb\064\uffeb\065\uffeb\067\uffeb\071\uffeb\072\105\073" +
    "\uffeb\074\103\075\uffeb\076\uffeb\001\002\000\106\002\uffe5" +
    "\004\uffe5\005\uffe5\011\uffe5\014\uffe5\016\uffe5\020\uffe5\025" +
    "\uffe5\026\uffe5\027\uffe5\031\uffe5\033\uffe5\035\uffe5\036\uffe5" +
    "\041\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\052" +
    "\uffe5\057\uffe5\060\uffe5\061\104\063\uffe5\064\uffe5\065\uffe5" +
    "\067\uffe5\071\uffe5\072\105\073\uffe5\074\103\075\uffe5\076" +
    "\uffe5\001\002\000\114\002\uffda\004\uffda\005\uffda\011\uffda" +
    "\014\uffda\016\uffda\020\uffda\025\uffda\026\uffda\027\uffda\031" +
    "\uffda\033\uffda\035\uffda\036\uffda\041\uffda\042\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\052\uffda\055\uffda\057\uffda\060" +
    "\uffda\061\uffda\062\053\063\uffda\064\uffda\065\uffda\067\uffda" +
    "\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077" +
    "\uffda\001\002\000\012\014\033\041\026\101\023\102\037" +
    "\001\002\000\042\007\044\010\024\014\033\033\020\034" +
    "\047\041\026\060\uffba\066\022\070\021\072\042\074\015" +
    "\076\uffb9\100\032\101\023\102\037\104\027\001\002\000" +
    "\004\076\162\001\002\000\114\002\uffd2\004\uffd2\005\uffd2" +
    "\011\uffd2\014\uffd2\016\uffd2\020\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\031\uffd2\033\uffd2\035\uffd2\036\uffd2\041\uffd2\042\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\052\uffd2\055\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2" +
    "\067\uffd2\071\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076" +
    "\uffd2\077\uffd2\001\002\000\006\056\ufff5\070\ufff5\001\002" +
    "\000\036\007\044\010\024\014\033\033\020\034\047\041" +
    "\026\066\022\070\021\072\042\074\015\100\032\101\023" +
    "\102\037\104\027\001\002\000\006\005\070\057\071\001" +
    "\002\000\010\005\uffbd\057\uffbd\076\167\001\002\000\114" +
    "\002\uffd1\004\uffd1\005\uffd1\011\uffd1\014\uffd1\016\uffd1\020" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\031\uffd1\033\uffd1\035\uffd1" +
    "\036\uffd1\041\uffd1\042\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\052\uffd1\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1" +
    "\063\uffd1\064\uffd1\065\uffd1\067\uffd1\071\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\001\002\000\004" +
    "\075\171\001\002\000\114\002\uffcf\004\uffcf\005\uffcf\011" +
    "\uffcf\014\uffcf\016\uffcf\020\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\031\uffcf\033\uffcf\035\uffcf\036\uffcf\041\uffcf\042\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\055\uffcf\057\uffcf" +
    "\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\067" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\001\002\000\004\076\173\001\002\000\114\002" +
    "\uffd0\004\uffd0\005\uffd0\011\uffd0\014\uffd0\016\uffd0\020\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\031\uffd0\033\uffd0\035\uffd0\036" +
    "\uffd0\041\uffd0\042\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0" +
    "\052\uffd0\055\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\067\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\074\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000\054\002" +
    "\uffed\004\uffed\005\uffed\011\uffed\014\uffed\016\uffed\020\uffed" +
    "\031\uffed\035\uffed\036\uffed\041\uffed\042\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\052\uffed\057\uffed\060\uffed\075\uffed" +
    "\076\uffed\001\002\000\114\002\uffdb\004\uffdb\005\uffdb\011" +
    "\uffdb\014\uffdb\016\uffdb\020\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\031\uffdb\033\uffdb\035\uffdb\036\uffdb\041\uffdb\042\uffdb\045" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\052\uffdb\055\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\053\063\uffdb\064\uffdb\065\uffdb\067" +
    "\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb" +
    "\077\uffdb\001\002\000\004\023\177\001\002\000\010\015" +
    "\005\045\uffaf\053\010\001\002\000\004\002\uff71\001\002" +
    "\000\004\002\uff70\001\002\000\004\002\uff6f\001\002\000" +
    "\004\045\uffae\001\002\000\010\031\uffa3\045\uffa3\046\uffa3" +
    "\001\002\000\010\031\210\045\uffa5\046\206\001\002\000" +
    "\012\014\033\041\026\101\023\102\037\001\002\000\010" +
    "\031\uffa2\045\uffa2\046\uffa2\001\002\000\012\014\033\041" +
    "\026\101\023\102\037\001\002\000\004\005\216\001\002" +
    "\000\024\002\ufff8\005\ufff8\011\ufff8\035\ufff8\041\ufff8\042" +
    "\ufff8\051\ufff8\060\ufff8\062\ufff8\001\002\000\006\005\uff9b" +
    "\062\214\001\002\000\012\014\033\041\026\101\023\102" +
    "\037\001\002\000\024\002\ufff7\005\ufff7\011\ufff7\035\ufff7" +
    "\041\ufff7\042\ufff7\051\ufff7\060\ufff7\062\ufff7\001\002\000" +
    "\040\007\044\010\024\014\033\033\020\034\047\041\026" +
    "\066\022\070\021\072\042\074\015\100\032\101\023\102" +
    "\037\104\027\105\220\001\002\000\016\031\uff9f\036\073" +
    "\045\uff9f\046\uff9f\052\074\060\221\001\002\000\012\031" +
    "\uff9f\045\uff9f\046\uff9f\060\221\001\002\000\012\014\033" +
    "\041\026\101\023\102\037\001\002\000\010\031\uffa1\045" +
    "\uffa1\046\uffa1\001\002\000\010\031\uff9e\045\uff9e\046\uff9e" +
    "\001\002\000\012\031\uff9d\045\uff9d\046\uff9d\060\230\001" +
    "\002\000\004\063\226\001\002\000\036\007\044\010\024" +
    "\014\033\033\020\034\047\041\026\066\022\070\021\072" +
    "\042\074\015\100\032\101\023\102\037\104\027\001\002" +
    "\000\016\031\uff9a\036\073\045\uff9a\046\uff9a\052\074\060" +
    "\uff9a\001\002\000\012\014\033\041\026\101\023\102\037" +
    "\001\002\000\010\031\uff9c\045\uff9c\046\uff9c\001\002\000" +
    "\010\031\uffa0\045\uffa0\046\uffa0\001\002\000\004\005\235" +
    "\001\002\000\006\005\uff97\062\214\001\002\000\040\007" +
    "\044\010\024\014\033\033\020\034\047\041\026\066\022" +
    "\070\021\072\042\074\015\100\032\101\023\102\037\104" +
    "\027\105\237\001\002\000\014\005\070\031\uff98\045\uff98" +
    "\046\uff98\057\071\001\002\000\010\031\uff99\045\uff99\046" +
    "\uff99\001\002\000\004\045\uffa4\001\002\000\042\007\uff94" +
    "\010\uff94\014\uff94\024\uffad\032\245\033\uff94\034\uff94\041" +
    "\uff94\066\uff94\070\uff94\072\uff94\074\uff94\100\uff94\101\uff94" +
    "\102\uff94\104\uff94\001\002\000\004\024\302\001\002\000" +
    "\036\007\044\010\024\014\033\033\020\034\047\041\026" +
    "\066\022\070\021\072\042\074\015\100\032\101\023\102" +
    "\037\104\027\001\002\000\006\024\uffab\060\250\001\002" +
    "\000\004\017\247\001\002\000\004\024\uffac\001\002\000" +
    "\036\007\uff93\010\uff93\014\uff93\033\uff93\034\uff93\041\uff93" +
    "\066\uff93\070\uff93\072\uff93\074\uff93\100\uff93\101\uff93\102" +
    "\uff93\104\uff93\001\002\000\040\007\uff94\010\uff94\014\uff94" +
    "\032\245\033\uff94\034\uff94\041\uff94\066\uff94\070\uff94\072" +
    "\uff94\074\uff94\100\uff94\101\uff94\102\uff94\104\uff94\001\002" +
    "\000\004\024\uffaa\001\002\000\014\005\070\014\254\035" +
    "\uff92\041\uff88\057\071\001\002\000\004\035\uff91\001\002" +
    "\000\004\041\uff87\001\002\000\004\035\265\001\002\000" +
    "\004\041\257\001\002\000\012\014\033\041\026\101\023" +
    "\102\037\001\002\000\004\035\uff89\001\002\000\006\035" +
    "\uff86\060\263\001\002\000\010\035\uff84\060\uff84\062\214" +
    "\001\002\000\012\014\033\041\026\101\023\102\037\001" +
    "\002\000\004\035\uff85\001\002\000\020\006\270\012\267" +
    "\013\274\037\275\043\276\044\266\100\271\001\002\000" +
    "\006\024\uff8d\060\uff8d\001\002\000\006\024\uff8c\060\uff8c" +
    "\001\002\000\004\070\277\001\002\000\006\024\uff8b\060" +
    "\uff8b\001\002\000\006\024\uff96\060\uff96\001\002\000\006" +
    "\024\uff95\060\uff95\001\002\000\006\024\uff90\060\uff90\001" +
    "\002\000\006\024\uff8e\060\uff8e\001\002\000\006\024\uff8f" +
    "\060\uff8f\001\002\000\004\100\300\001\002\000\004\076" +
    "\301\001\002\000\006\024\uff8a\060\uff8a\001\002\000\012" +
    "\014\033\041\026\101\023\102\037\001\002\000\014\002" +
    "\uff83\011\uff83\041\uff83\042\uff83\051\uff83\001\002\000\016" +
    "\002\ufff4\011\ufff4\041\ufff4\042\ufff4\051\ufff4\062\214\001" +
    "\002\000\014\002\uffa9\011\uffa9\041\uffa9\042\uffa9\051\306" +
    "\001\002\000\036\007\044\010\024\014\033\033\020\034" +
    "\047\041\026\066\022\070\021\072\042\074\015\100\032" +
    "\101\023\102\037\104\027\001\002\000\012\002\uffa7\011" +
    "\313\041\uff80\042\uffa7\001\002\000\006\002\uffa6\042\uffa6" +
    "\001\002\000\004\041\314\001\002\000\006\002\uffb0\042" +
    "\uffb0\001\002\000\004\041\uff7f\001\002\000\012\014\033" +
    "\041\026\101\023\102\037\001\002\000\010\002\uff7e\042" +
    "\uff7e\060\320\001\002\000\006\002\uff81\042\uff81\001\002" +
    "\000\012\002\uff7c\042\uff7c\060\uff7c\062\214\001\002\000" +
    "\012\014\033\041\026\101\023\102\037\001\002\000\006" +
    "\002\uff7d\042\uff7d\001\002\000\012\002\uffa8\011\uffa8\041" +
    "\uffa8\042\uffa8\001\002\000\016\002\uff82\005\070\011\uff82" +
    "\041\uff82\042\uff82\057\071\001\002\000\004\002\001\001" +
    "\002\000\004\100\342\001\002\000\010\022\330\045\uff77" +
    "\053\uff77\001\002\000\006\045\uffaf\053\010\001\002\000" +
    "\004\100\331\001\002\000\006\045\uff78\053\uff78\001\002" +
    "\000\006\002\uff75\042\333\001\002\000\012\014\033\041" +
    "\026\101\023\102\037\001\002\000\004\002\uff7b\001\002" +
    "\000\006\002\uff74\060\340\001\002\000\004\002\uff76\001" +
    "\002\000\010\002\uff72\060\uff72\062\214\001\002\000\012" +
    "\014\033\041\026\101\023\102\037\001\002\000\004\002" +
    "\uff73\001\002\000\010\022\uff7a\045\uff7a\053\uff7a\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\014\025\003\026\005\030\010\031\012\100" +
    "\006\001\001\000\002\001\001\000\004\103\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\050\203\051" +
    "\206\052\204\071\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\034\005\016\007" +
    "\027\011\033\013\035\014\044\015\042\016\040\017\037" +
    "\021\030\023\045\032\024\043\047\044\015\045\051\046" +
    "\050\001\001\000\020\005\016\023\174\032\024\043\047" +
    "\044\015\045\051\046\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\016\011\033\013\035\014\044" +
    "\015\042\016\173\023\045\032\024\043\047\044\015\045" +
    "\051\046\050\001\001\000\046\004\034\005\016\007\063" +
    "\010\064\011\033\013\035\014\044\015\042\016\040\017" +
    "\037\021\030\023\045\032\024\043\047\044\015\045\051" +
    "\046\050\067\171\001\001\000\050\004\034\005\016\007" +
    "\063\010\064\011\033\013\035\014\044\015\042\016\040" +
    "\017\037\021\030\023\045\032\024\043\047\044\015\045" +
    "\051\046\050\067\062\070\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\005\016\023\155\032\024\043" +
    "\047\044\015\045\051\046\050\001\001\000\004\042\131" +
    "\001\001\000\040\005\016\011\033\013\035\014\044\015" +
    "\042\016\040\017\037\021\114\022\115\023\045\032\024" +
    "\043\047\044\015\045\051\046\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\043\047\044" +
    "\054\045\056\046\055\047\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\004\034\005\016\007\063\010\064" +
    "\011\033\013\035\014\044\015\042\016\040\017\037\021" +
    "\030\023\045\032\024\043\047\044\015\045\051\046\050" +
    "\067\062\070\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\004\034" +
    "\005\016\007\063\010\064\011\033\013\035\014\044\015" +
    "\042\016\040\017\037\021\030\023\045\032\024\043\047" +
    "\044\015\045\051\046\050\067\066\001\001\000\002\001" +
    "\001\000\012\043\047\044\100\045\051\046\050\001\001" +
    "\000\036\005\016\011\033\013\035\014\044\015\042\016" +
    "\040\017\037\021\071\023\045\032\024\043\047\044\015" +
    "\045\051\046\050\001\001\000\002\001\001\000\034\005" +
    "\016\011\033\013\035\014\044\015\042\016\040\017\077" +
    "\023\045\032\024\043\047\044\015\045\051\046\050\001" +
    "\001\000\034\005\016\011\033\013\035\014\044\015\042" +
    "\016\040\017\074\023\045\032\024\043\047\044\015\045" +
    "\051\046\050\001\001\000\002\001\001\000\032\005\016" +
    "\011\033\013\035\014\044\015\042\016\076\023\045\032" +
    "\024\043\047\044\015\045\051\046\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\016\011\033\013\113\023\045\032\024" +
    "\043\047\044\015\045\051\046\050\001\001\000\024\005" +
    "\016\011\033\013\112\023\045\032\024\043\047\044\015" +
    "\045\051\046\050\001\001\000\024\005\016\011\033\013" +
    "\105\023\045\032\024\043\047\044\015\045\051\046\050" +
    "\001\001\000\002\001\001\000\022\005\016\011\111\023" +
    "\045\032\024\043\047\044\015\045\051\046\050\001\001" +
    "\000\022\005\016\011\110\023\045\032\024\043\047\044" +
    "\015\045\051\046\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\116\001\001\000\006\006\117\101\122" +
    "\001\001\000\002\001\001\000\036\005\016\011\033\013" +
    "\035\014\044\015\042\016\040\017\037\021\126\023\045" +
    "\032\024\043\047\044\015\045\051\046\050\001\001\000" +
    "\036\005\016\011\033\013\035\014\044\015\042\016\040" +
    "\017\037\021\123\023\045\032\024\043\047\044\015\045" +
    "\051\046\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\005\016\011\033\013\035\014\044\015\042\016" +
    "\040\017\037\021\125\023\045\032\024\043\047\044\015" +
    "\045\051\046\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\016\011\033\013\035" +
    "\014\154\023\045\032\024\043\047\044\015\045\051\046" +
    "\050\001\001\000\026\005\016\011\033\013\035\014\153" +
    "\023\045\032\024\043\047\044\015\045\051\046\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\016\011" +
    "\033\013\035\014\146\023\045\032\024\043\047\044\015" +
    "\045\051\046\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\016\011\033\013\035\014\143\023\045" +
    "\032\024\043\047\044\015\045\051\046\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\016\011\033\013\035\014\152\023" +
    "\045\032\024\043\047\044\015\045\051\046\050\001\001" +
    "\000\026\005\016\011\033\013\035\014\151\023\045\032" +
    "\024\043\047\044\015\045\051\046\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\043\047\044\162\045\051" +
    "\046\050\001\001\000\050\004\034\005\016\007\063\010" +
    "\064\011\033\013\035\014\044\015\042\016\040\017\037" +
    "\021\030\023\045\032\024\043\047\044\015\045\051\046" +
    "\050\067\062\070\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\165\005\016\007" +
    "\164\011\033\013\035\014\044\015\042\016\040\017\037" +
    "\021\030\023\045\032\024\043\047\044\015\045\051\046" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\177\027\201\030\200\100" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\050" +
    "\203\051\206\052\204\071\237\001\001\000\016\034\233" +
    "\040\232\043\047\044\211\045\051\046\050\001\001\000" +
    "\002\001\001\000\016\034\212\037\210\043\047\044\211" +
    "\045\051\046\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\043\047\044\214\045\051" +
    "\046\050\001\001\000\002\001\001\000\036\005\016\011" +
    "\033\013\035\014\044\015\042\016\040\017\037\021\216" +
    "\023\045\032\024\043\047\044\015\045\051\046\050\001" +
    "\001\000\004\064\231\001\001\000\004\064\221\001\001" +
    "\000\016\043\047\044\224\045\051\046\050\053\223\072" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\016\011\033\013" +
    "\035\014\044\015\042\016\040\017\037\021\226\023\045" +
    "\032\024\043\047\044\015\045\051\046\050\001\001\000" +
    "\002\001\001\000\016\043\047\044\224\045\051\046\050" +
    "\053\223\072\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\034" +
    "\005\016\007\235\011\033\013\035\014\044\015\042\016" +
    "\040\017\037\021\030\023\045\032\024\043\047\044\015" +
    "\045\051\046\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\243\057\242\060\245" +
    "\061\241\001\001\000\002\001\001\000\042\004\034\005" +
    "\016\007\251\011\033\013\035\014\044\015\042\016\040" +
    "\017\037\021\030\023\045\032\024\043\047\044\015\045" +
    "\051\046\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\243\057" +
    "\242\060\250\001\001\000\002\001\001\000\010\055\255" +
    "\065\252\066\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\261" +
    "\043\047\044\211\045\051\046\050\056\260\073\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\034\261\043\047\044\211\045\051\046\050\056" +
    "\260\073\263\001\001\000\002\001\001\000\006\041\271" +
    "\102\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\034\303\035\302\036\304\043\047\044\211\045" +
    "\051\046\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\306\001\001\000\044\004\034\005\016\007" +
    "\322\011\033\012\321\013\035\014\044\015\042\016\040" +
    "\017\037\021\030\023\045\032\024\043\047\044\015\045" +
    "\051\046\050\001\001\000\010\054\310\062\307\063\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\033\314\034\316\043\047" +
    "\044\211\045\051\046\050\074\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\033\314" +
    "\034\316\043\047\044\211\045\051\046\050\074\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\326\001" +
    "\001\000\006\025\331\100\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\333\001\001\000\020\020" +
    "\334\034\336\043\047\044\211\045\051\046\050\076\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\334\034\336\043\047" +
    "\044\211\045\051\046\050\076\340\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    scanner.init();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return scanner.next_token();

    }


    // Generated from Parser.cup.
    private Scanner scanner;
    private String queryString;
    Statement statement;
    private FunTable funTable;
    boolean strictValidation;
    MdxParserValidator.QueryPartFactory factory;

    /**
      * Recursively parses an expression.
      */
    Exp recursivelyParseExp(String s)
    {
        return new Parser().parseExpression(
            factory, statement, s, false, funTable);
    }

    /**
      * Parses a string to create a {@link Query}.
      * Called only by {@link ConnectionBase#parseQuery}.
      */
    public QueryPart parseInternal(
        MdxParserValidator.QueryPartFactory factory,
        Statement statement,
        String queryString,
        boolean debug,
        FunTable funTable,
        boolean strictValidation)
    {
        Symbol parse_tree;
        this.factory = factory;
        this.scanner = new StringScanner(queryString, debug);
        this.statement = statement;
        this.queryString = queryString;
        this.funTable = funTable;
        this.strictValidation = strictValidation;
        try {
            if (debug) {
                parse_tree = debug_parse();
            } else {
                parse_tree = parse();
            }
            return (QueryPart) parse_tree.value;
        } catch (Exception e) {
            // "Error while parsing MDX statement '%1'"
            throw MondrianResource.instance().WhileParsingMdx.ex(
                queryString, e);
        } finally {
            this.scanner = null;
            this.statement = null;
            this.queryString = null;
            this.funTable = null;
        }
    }

    /**
      * Parses a string to create an {@link Exp}.
      * Called only by {@link ConnectionBase#parseExpression}.
      */
    public Exp parseExpression(
        MdxParserValidator.QueryPartFactory factory,
        Statement statement,
        String queryString,
        boolean debug,
        FunTable funTable)
    {
        this.factory = factory;
        Symbol parse_tree = null;
        this.scanner = new PrefixScanner(
            debug,
            new StringScanner(queryString, debug),
            new int[] {ParserSym._VALUE_EXPRESSION});
        this.statement = statement;
        this.queryString = queryString;
        this.funTable = funTable;
        try {
            if (debug) {
                parse_tree = debug_parse();
            } else {
                parse_tree = parse();
            }
            return (Exp) parse_tree.value;
        } catch (Exception e) {
            // "Syntax error while parsing MDX expression '%1'"
            throw MondrianResource.instance().WhileParsingMdxExpression.ex(
                queryString, e);
        } finally {
            this.scanner = null;
            this.statement = null;
            this.queryString = null;
            this.funTable = null;
        }
    }

    /**
      * Scanner which returns a list of pre-programmed tokens, then switches
      * to a parent scanner.
      */
    private static class PrefixScanner extends Scanner {
        private final Scanner parent;
        private final int tokens[];
        private int i;

        PrefixScanner(boolean debug, Scanner parent, int[] tokens) {
            super(debug);
            this.parent = parent;
            this.tokens = tokens;
        }

        public void init() throws java.io.IOException {
            i = 0;
            parent.init();
        }

        public Symbol next_token() throws java.io.IOException {
            if (i < tokens.length) {
                return new Symbol(tokens[i++], 0, 0, null);
            }
            return parent.next_token();
        }

        void getLocation(Symbol symbol, int[] loc) {
            parent.getLocation(symbol, loc);
        }
    }

    public static class FactoryImpl
        implements MdxParserValidator.QueryPartFactory
    {
        public Query makeQuery(
            Statement statement,
            Formula[] formulae,
            QueryAxis[] axes,
            String cube,
            Exp slicer,
            QueryPart[] cellProps,
            boolean strictValidation)
        {
            final QueryAxis slicerAxis =
                slicer == null
                    ? null
                    : new QueryAxis(
                        false, slicer, AxisOrdinal.StandardAxisOrdinal.SLICER,
                        QueryAxis.SubtotalVisibility.Undefined, new Id[0]);
            return new Query(
                statement, formulae, axes, cube, slicerAxis, cellProps,
                strictValidation);
        }

        public DrillThrough makeDrillThrough(
            Query query,
            int maxRowCount,
            int firstRowOrdinal,
            List<Exp> returnList)
        {
            return new DrillThrough(
                query, maxRowCount, firstRowOrdinal, returnList);
        }

        /**
         * Creates an {@link Explain} object.
         */
        public Explain makeExplain(
            QueryPart query)
        {
            return new Explain(query);
        }
    }

    // Override lr_parser methods for NLS.  With this error handling scheme,
    // all errors are fatal.
    public void report_fatal_error(
        String   message,
        Object   info)
        throws java.lang.Exception
    {
        done_parsing();
        try {
            report_error(message, info);
        } catch (Throwable e) {
            // "MDX parser cannot recover from previous error(s)"
            throw MondrianResource.instance().MdxFatalError.ex(e);
        }
    }

    // override lr_parser method
    public void report_error(String message, Object info)
    {
        // "Error: %1"
        throw MondrianResource.instance().MdxError.ex(message);
    }

    // override lr_parser method
    public void syntax_error(Symbol cur_token)
    {
        String s = cur_token.value.toString();
        if (cur_token.left != -1) {
            int loc[] = new int[2];
            scanner.getLocation(cur_token, loc);
            // "Syntax error at line %2, column %3, token '%1'"
            throw MondrianResource.instance().MdxSyntaxErrorAt.ex(
                s, Integer.toString(loc[0] + 1), Integer.toString(loc[1] + 1));
        } else {
            // "Syntax error at token '%1'"
            throw MondrianResource.instance().MdxSyntaxError.ex(s);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token)
        throws java.lang.Exception
    {
        // "Couldn't repair and continue parse"
        String sFatalSyntaxError =
            MondrianResource.instance().MdxFatalSyntaxError.str();
        report_fatal_error(sFatalSyntaxError, cur_token);
    }

    /**
     * Returns whether the given identifier can possibly the name of an operator
     * with property syntax.
     *
     * <p>For example, <code>isFunCall("ORDINAL")</code>
     * returns true because there is a "&lt;Level&gt;.Ordinal" property.</p>
     */
    protected boolean isFunCall(String s) {
        return funTable.isProperty(s);
    }

    static Id[] toIdArray(List<Id> idList) {
        if (idList == null || idList.size() == 0) {
            return EmptyIdArray;
        } else {
            return idList.toArray(new Id[idList.size()]);
        }
    }

    static Exp[] toExpArray(List<Exp> expList) {
        if (expList == null || expList.size() == 0) {
            return EmptyExpArray;
        } else {
            return expList.toArray(new Exp[expList.size()]);
        }
    }

    static Formula[] toFormulaArray(List<Formula> formulaList) {
        if (formulaList == null || formulaList.size() == 0) {
            return EmptyFormulaArray;
        } else {
            return formulaList.toArray(new Formula[formulaList.size()]);
        }
    }

    static MemberProperty[] toMemberPropertyArray(List<MemberProperty> mpList) {
        if (mpList == null || mpList.size() == 0) {
            return EmptyMemberPropertyArray;
        } else {
            return mpList.toArray(new MemberProperty[mpList.size()]);
        }
    }

    static QueryPart[] toQueryPartArray(List<QueryPart> qpList) {
        if (qpList == null || qpList.size() == 0) {
            return EmptyQueryPartArray;
        } else {
            return qpList.toArray(new QueryPart[qpList.size()]);
        }
    }

    static QueryAxis[] toQueryAxisArray(List<QueryAxis> qpList) {
        if (qpList == null || qpList.size() == 0) {
            return EmptyQueryAxisArray;
        } else {
            return qpList.toArray(new QueryAxis[qpList.size()]);
        }
    }

    private static final MemberProperty[] EmptyMemberPropertyArray =
        new MemberProperty[0];
    private static final Exp[] EmptyExpArray = new Exp[0];
    private static final Formula[] EmptyFormulaArray = new Formula[0];
    private static final Id[] EmptyIdArray = new Id[0];
    private static final QueryPart[] EmptyQueryPartArray = new QueryPart[0];
    private static final QueryAxis[] EmptyQueryAxisArray = new QueryAxis[0];

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // explain_statement ::= EXPLAIN PLAN FOR select_or_drillthrough_statement 
            {
              QueryPart RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		QueryPart s = (QueryPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = parser.factory.makeExplain(
                s);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*explain_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // select_or_drillthrough_statement ::= drillthrough_statement 
            {
              QueryPart RESULT = null;

		// Default action for single-symbol production
		RESULT = (QueryPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*select_or_drillthrough_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // select_or_drillthrough_statement ::= select_statement 
            {
              QueryPart RESULT = null;

		// Default action for single-symbol production
		RESULT = (Query)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*select_or_drillthrough_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // return_item ::= compound_id 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*return_item*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // return_item_list ::= return_item COMMA return_item_list 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            list.add(0, i);
            RESULT = list;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(60/*return_item_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // return_item_list ::= return_item 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(i);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(60/*return_item_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // return_opt ::= 
            {
              List RESULT = null;
		
            RESULT = null;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*return_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // return_opt ::= RETURN return_item_list 
            {
              List RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List rl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = rl;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*return_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // firstrowset_opt ::= 
            {
              Number RESULT = null;
		
            RESULT = null;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(66/*firstrowset_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // firstrowset_opt ::= FIRSTROWSET NUMBER 
            {
              Number RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		BigDecimal n = (BigDecimal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = n;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(66/*firstrowset_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // maxrows_opt ::= 
            {
              Number RESULT = null;
		
            RESULT = null;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(65/*maxrows_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // maxrows_opt ::= MAXROWS NUMBER 
            {
              Number RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		BigDecimal n = (BigDecimal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = n;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(65/*maxrows_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // drillthrough_statement ::= DRILLTHROUGH maxrows_opt firstrowset_opt select_statement return_opt 
            {
              QueryPart RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Number m = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Number f = (Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Query s = (Query)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List r = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = parser.factory.makeDrillThrough(
                s,
                m == null ? 0 : m.intValue(),
                f == null ? 0 : f.intValue(),
                r);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*drillthrough_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // cell_property ::= compound_id 
            {
              Id RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*cell_property*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // cell_property_list ::= cell_property COMMA cell_property_list 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id p = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List p1 = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
        p1.add(0, new CellProperty(p.getSegments()));
        RESULT = p1;
    
              CUP$Parser$result = new java_cup.runtime.Symbol(58/*cell_property_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // cell_property_list ::= cell_property 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id p = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
        RESULT = new LinkedList();
        RESULT.add(new CellProperty(p.getSegments()));
    
              CUP$Parser$result = new java_cup.runtime.Symbol(58/*cell_property_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // cell_opt ::= CELL 
            {
              Object RESULT = null;

		// Default action for single-symbol production
		RESULT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*cell_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // cell_opt ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(42/*cell_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // cell_props ::= cell_opt PROPERTIES cell_property_list 
            {
              List RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List p1 = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = p1;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(48/*cell_props*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // slicer_specification ::= expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*slicer_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cube_specification ::= cube_name 
            {
              Id RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*cube_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // property ::= compound_id 
            {
              Object RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*property*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // property_list ::= property COMMA property_list 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            pl.add(0, p);
            RESULT = pl;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*property_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // property_list ::= property 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(p);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*property_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // dimension_opt ::= DIMENSION 
            {
              Object RESULT = null;

		// Default action for single-symbol production
		RESULT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*dimension_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // dimension_opt ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(43/*dimension_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // dim_props ::= dimension_opt PROPERTIES property_list 
            {
              List RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
        RESULT = pl;
    
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*dim_props*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // axis_number ::= AXIS LPAREN NUMBER RPAREN 
            {
              BigDecimal RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BigDecimal n = (BigDecimal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = n;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(64/*axis_number*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // axis_number ::= NUMBER 
            {
              BigDecimal RESULT = null;

		// Default action for single-symbol production
		RESULT = (BigDecimal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(64/*axis_number*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // axis_name ::= CHAPTERS 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.CHAPTERS;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // axis_name ::= SECTIONS 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.SECTIONS;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // axis_name ::= PAGES 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.PAGES;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // axis_name ::= ROWS 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.ROWS;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // axis_name ::= COLUMNS 
            {
              AxisOrdinal.StandardAxisOrdinal RESULT = null;
		
            RESULT = AxisOrdinal.StandardAxisOrdinal.COLUMNS;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*axis_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // dim_props_opt ::= dim_props 
            {
              List RESULT = null;

		// Default action for single-symbol production
		RESULT = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(52/*dim_props_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // dim_props_opt ::= 
            {
              List RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(52/*dim_props_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // non_empty_opt ::= NON EMPTY 
            {
              Boolean RESULT = null;
		
            RESULT = Boolean.TRUE;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*non_empty_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // non_empty_opt ::= 
            {
              Boolean RESULT = null;
		
            RESULT = Boolean.FALSE;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*non_empty_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // axis_specification ::= non_empty_opt expression dim_props_opt ON axis_number 
            {
              QueryAxis RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List dp = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		BigDecimal n = (BigDecimal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            double d = n.doubleValue();
            int index = n.intValue();

            // AxisOrdinal values go from -2 to 4 for standard axis, but higher
            // ordinals are allowed. The negative values represent
            // special cases, so are ignored.
            if (index < 0 || index != d) {
                throw MondrianResource.instance().InvalidAxis.ex(
                    d);
            }

            AxisOrdinal axis =
                AxisOrdinal.StandardAxisOrdinal.forLogicalOrdinal(index);
            RESULT =
                new QueryAxis(
                    b.booleanValue(), s, axis,
                    QueryAxis.SubtotalVisibility.Undefined,
                    Parser.toIdArray(dp));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*axis_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // axis_specification ::= non_empty_opt expression dim_props_opt ON axis_name 
            {
              QueryAxis RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List dp = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		AxisOrdinal.StandardAxisOrdinal a = (AxisOrdinal.StandardAxisOrdinal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new QueryAxis(
                    b.booleanValue(), s, a,
                    QueryAxis.SubtotalVisibility.Undefined,
                    Parser.toIdArray(dp));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*axis_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // set_name ::= compound_id 
            {
              Id RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*set_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // set_specification ::= SET set_name AS expression 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id n = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Formula(n, e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*set_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // set_specification ::= SET set_name AS FORMULA_STRING 
            {
              Formula RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id n = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            Exp e = parser.recursivelyParseExp(s);
            RESULT = new Formula(n, e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*set_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // member_property_definition ::= identifier EQ value_expression 
            {
              MemberProperty RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id.NameSegment id = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new MemberProperty(id.name, e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*member_property_definition*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // member_name ::= compound_id 
            {
              Id RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*member_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // member_property_def_list ::= member_property_definition COMMA member_property_def_list 
            {
              List RESULT = null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		MemberProperty hd = (MemberProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List tl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = tl;
            RESULT.add(0, hd);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*member_property_def_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // member_property_def_list ::= member_property_definition 
            {
              List RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		MemberProperty m = (MemberProperty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(m);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*member_property_def_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // comma_member_property_def_list_opt ::= COMMA member_property_def_list 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = l;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*comma_member_property_def_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comma_member_property_def_list_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*comma_member_property_def_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // member_specification ::= MEMBER member_name AS value_expression comma_member_property_def_list_opt 
            {
              Formula RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id m = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Formula(
                m,
                e,
                Parser.toMemberPropertyArray(l));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*member_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // member_specification ::= MEMBER member_name AS FORMULA_STRING comma_member_property_def_list_opt 
            {
              Formula RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id m = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            Exp e = parser.recursivelyParseExp(s);
            RESULT = new Formula(
                m,
                e,
                Parser.toMemberPropertyArray(l));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*member_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // single_formula_specification ::= set_specification 
            {
              Formula RESULT = null;

		// Default action for single-symbol production
		RESULT = (Formula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*single_formula_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // single_formula_specification ::= member_specification 
            {
              Formula RESULT = null;

		// Default action for single-symbol production
		RESULT = (Formula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*single_formula_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // formula_specification ::= single_formula_specification formula_specification 
            {
              List RESULT = null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Formula hd = (Formula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List tl = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            tl.add(0, hd);
            RESULT = tl;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*formula_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // formula_specification ::= single_formula_specification 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Formula e = (Formula)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*formula_specification*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // cell_props_opt ::= cell_props 
            {
              List RESULT = null;

		// Default action for single-symbol production
		RESULT = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*cell_props_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cell_props_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*cell_props_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // where_clause_opt ::= WHERE slicer_specification 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = s;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*where_clause_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // where_clause_opt ::= 
            {
              Exp RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(18/*where_clause_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // axis_specification_list ::= axis_specification COMMA axis_specification_list 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		QueryAxis e = (QueryAxis)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            list.add(0, e);
            RESULT = list;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*axis_specification_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // axis_specification_list ::= axis_specification 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		QueryAxis i = (QueryAxis)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(i);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*axis_specification_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // axis_specification_list_opt ::= axis_specification_list 
            {
              List RESULT = null;

		// Default action for single-symbol production
		RESULT = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*axis_specification_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // axis_specification_list_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*axis_specification_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // with_formula_specification_opt ::= WITH formula_specification 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = f;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(62/*with_formula_specification_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // with_formula_specification_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(62/*with_formula_specification_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // select_statement ::= with_formula_specification_opt SELECT axis_specification_list_opt FROM cube_specification where_clause_opt cell_props_opt 
            {
              Query RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id c = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp w = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List cp = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            Parser parser = (Parser) CUP$Parser$parser;
            // We want 'Sales', not '[Sales]', and can't handle 'Schema.Sales'
            // yet.
            String cubeName = ((Id.NameSegment) c.getElement(0)).name;
            RESULT = parser.factory.makeQuery(
                parser.statement,
                Parser.toFormulaArray(f),
                Parser.toQueryAxisArray(a),
                cubeName,
                w,
                Parser.toQueryPartArray(cp),
                parser.strictValidation);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*select_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= _VALUE_EXPRESSION expression 
            {
              QueryPart RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = (QueryPart) e;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= explain_statement 
            {
              QueryPart RESULT = null;

		// Default action for single-symbol production
		RESULT = (QueryPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= drillthrough_statement 
            {
              QueryPart RESULT = null;

		// Default action for single-symbol production
		RESULT = (QueryPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= select_statement 
            {
              QueryPart RESULT = null;

		// Default action for single-symbol production
		RESULT = (Query)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // aliasedExpression ::= expression AS identifier 
            {
              UnresolvedFunCall RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.NameSegment i = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            Id id = new Id(i);
            RESULT =
                new UnresolvedFunCall("AS", Syntax.Infix, new Exp[] {x, id});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*aliasedExpression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp_list ::= expression_or_empty COMMA exp_list 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            list.add(0, e); RESULT = list;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*exp_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp_list ::= expression 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new LinkedList();
            RESULT.add(e);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*exp_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp_list_opt ::= exp_list 
            {
              List RESULT = null;

		// Default action for single-symbol production
		RESULT = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*exp_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp_list_opt ::= 
            {
              List RESULT = null;
		
            RESULT = new LinkedList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*exp_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_or_empty ::= 
            {
              Exp RESULT = null;
		
            RESULT = new UnresolvedFunCall("", Syntax.Empty, new Exp[] {});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*expression_or_empty*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_or_empty ::= expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*expression_or_empty*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= value_expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= aliasedExpression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (UnresolvedFunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= expression COLON value_expression 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 // range yields set
            RESULT = new UnresolvedFunCall(":", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // comp_op ::= GE 
            {
              String RESULT = null;
		
            RESULT = ">=";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // comp_op ::= LE 
            {
              String RESULT = null;
		
            RESULT = "<=";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // comp_op ::= GT 
            {
              String RESULT = null;
		
            RESULT = ">";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // comp_op ::= LT 
            {
              String RESULT = null;
		
            RESULT = "<";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // comp_op ::= NE 
            {
              String RESULT = null;
		
            RESULT = "<>";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // comp_op ::= EQ 
            {
              String RESULT = null;
		
            RESULT = "=";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*comp_op*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_clause_opt ::= ELSE value_expression 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = x;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*else_clause_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // else_clause_opt ::= 
            {
              Exp RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*else_clause_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // when_clause ::= WHEN value_expression THEN value_expression 
            {
              Exp[] RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Exp[] {x, y};
        
              CUP$Parser$result = new java_cup.runtime.Symbol(63/*when_clause*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // when_list ::= when_list when_clause 
            {
              List RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List x = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp[] y = (Exp[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = x;
            x.add(y);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(61/*when_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // when_list ::= 
            {
              List RESULT = null;
		
            RESULT = new ArrayList();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(61/*when_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // value_expression_opt ::= value_expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // value_expression_opt ::= 
            {
              Exp RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(16/*value_expression_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // case_expression ::= CASE value_expression_opt when_list else_clause_opt END 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List y = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp z = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            List v = new ArrayList();
            if (x != null) {
                v.add(x);
            }
            for (int i = 0; i < y.size(); i++) {
                Exp[] exps = (Exp[]) y.get(i);
                Util.assertTrue(exps.length == 2);
                v.add(exps[0]);
                v.add(exps[1]);
            }
            if (z != null) {
                v.add(z);
            }
            if (x == null) {
                RESULT = new UnresolvedFunCall(
                    "_CaseTest", Syntax.Case, Parser.toExpArray(v));
            } else {
                RESULT = new UnresolvedFunCall(
                    "_CaseMatch", Syntax.Case, Parser.toExpArray(v));
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*case_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value_expression_primary ::= case_expression 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // value_expression_primary ::= NULL 
            {
              Exp RESULT = null;
		
            RESULT = Literal.nullValue;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // value_expression_primary ::= LBRACE exp_list_opt RBRACE 
            {
              Exp RESULT = null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 // set built from sets/tuples
            RESULT = new UnresolvedFunCall(
                "{}", Syntax.Braces, Parser.toExpArray(lis));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // value_expression_primary ::= LPAREN exp_list RPAREN 
            {
              Exp RESULT = null;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
            // are just expressions.
            RESULT = new UnresolvedFunCall(
                "()", Syntax.Parentheses, Parser.toExpArray(lis));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value_expression_primary ::= CAST LPAREN aliasedExpression RPAREN 
            {
              Exp RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnresolvedFunCall ae = (UnresolvedFunCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            assert ae.getArgCount() == 2;
            Exp e = ae.getArg(0);
            Id.NameSegment t = (Id.NameSegment) ((Id) ae.getArg(1)).getSegments().get(0);
            RESULT = new UnresolvedFunCall(
                "CAST", Syntax.Cast, new Exp[] {
                    e,
                    Literal.createSymbol(t.name)});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value_expression_primary ::= bang_compound_id LPAREN exp_list_opt RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new UnresolvedFunCall(
                ((Id.NameSegment) Util.last(i.getSegments())).name,
                Syntax.Function, Parser.toExpArray(lis));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value_expression_primary ::= value_expression_primary DOT identifier LPAREN exp_list_opt RPAREN 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Id.NameSegment j = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List lis = (List)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            lis.add(0, i);
            RESULT = new UnresolvedFunCall(
                j.name, Syntax.Method, Parser.toExpArray(lis));
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value_expression_primary ::= value_expression_primary DOT amp_quoted_identifier 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.NameSegment j = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            if (i instanceof Id) {
                RESULT = ((Id) i).append(j);
            } else {
                RESULT = new UnresolvedFunCall(
                    j.name, Syntax.AmpersandQuotedProperty, new Exp[] {i});
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value_expression_primary ::= value_expression_primary DOT quoted_identifier 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.NameSegment j = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            if (i instanceof Id) {
                RESULT = ((Id) i).append(j);
            } else {
                RESULT = new UnresolvedFunCall(
                    j.name, Syntax.QuotedProperty, new Exp[] {i});
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // value_expression_primary ::= value_expression_primary DOT unquoted_identifier 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int jright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.NameSegment j = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            if (i instanceof Id && !parser.isFunCall(j.name)) {
                RESULT = ((Id) i).append(j);
            } else {
                RESULT =
                    new UnresolvedFunCall(
                        j.name, Syntax.Property, new Exp[] {i});
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value_expression_primary ::= identifier 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.NameSegment i = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id(i);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value_expression_primary ::= NUMBER 
            {
              Exp RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		BigDecimal d = (BigDecimal)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = Literal.create(d);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value_expression_primary ::= STRING 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = Literal.createString(s);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*value_expression_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= MINUS value_expression_primary 
            {
              Exp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("-", Syntax.Prefix, new Exp[] {p});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= PLUS value_expression_primary 
            {
              Exp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = p;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= value_expression_primary 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*factor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // term ::= term SOLIDUS factor 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("/", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // term ::= term ASTERISK factor 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("*", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= factor 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term2 ::= term2 CONCAT term 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                 new UnresolvedFunCall("||", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*term2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term2 ::= term2 MINUS term 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("-", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*term2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term2 ::= term2 PLUS term 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("+", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*term2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term2 ::= term 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*term2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term3 ::= term3 NOT IN term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall(
                "NOT", Syntax.Prefix, new Exp[] {
                    new UnresolvedFunCall(
                        "IN", Syntax.Infix, new Exp[] {x, y})});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term3 ::= term3 IN term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall("IN", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term3 ::= term3 NOT MATCHES term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall(
                "NOT", Syntax.Prefix, new Exp[] {
                    new UnresolvedFunCall(
                        "MATCHES", Syntax.Infix, new Exp[] {x, y})});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term3 ::= term3 MATCHES term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall(
                    "MATCHES", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term3 ::= term3 IS EMPTY 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT =
                new UnresolvedFunCall(
                    "IS EMPTY", Syntax.Postfix, new Exp[] {x});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term3 ::= term3 IS term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            // e.g. "x IS y"; but "x IS NULL" is handled elsewhere
            RESULT =
                new UnresolvedFunCall("IS", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // term3 ::= term3 IS NULL 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT =
                new UnresolvedFunCall("IS NULL", Syntax.Postfix, new Exp[] {x});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // term3 ::= term3 comp_op term2 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 // e.g. "1 < 5"
            RESULT = new UnresolvedFunCall(op, Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // term3 ::= term2 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*term3*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term4 ::= NOT term4 
            {
              Exp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new UnresolvedFunCall("NOT", Syntax.Prefix, new Exp[] {p});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*term4*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term4 ::= term3 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*term4*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term5 ::= term5 AND term4 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall("AND", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*term5*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term5 ::= term4 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*term5*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // value_expression ::= value_expression XOR term5 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall("XOR", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*value_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value_expression ::= value_expression OR term5 
            {
              Exp RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT =
                new UnresolvedFunCall("OR", Syntax.Infix, new Exp[] {x, y});
        
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*value_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value_expression ::= term5 
            {
              Exp RESULT = null;

		// Default action for single-symbol production
		RESULT = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*value_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cube_name ::= compound_id 
            {
              Id RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*cube_name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bang_compound_id ::= bang_compound_id BANG identifier 
            {
              Id RESULT = null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id hd = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.NameSegment tl = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = hd.append(tl);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*bang_compound_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bang_compound_id ::= identifier 
            {
              Id RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.NameSegment i = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id(i);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*bang_compound_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compound_id ::= compound_id DOT identifier 
            {
              Id RESULT = null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Id hd = (Id)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.NameSegment tl = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = hd.append(tl);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*compound_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compound_id ::= identifier 
            {
              Id RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Id.NameSegment i = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id(i);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*compound_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // keyword ::= PROPERTIES 
            {
              String RESULT = null;
		
            RESULT = "Properties";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*keyword*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // keyword ::= DIMENSION 
            {
              String RESULT = null;
		
            RESULT = "Dimension";
        
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*keyword*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier ::= quoted_identifier 
            {
              Id.NameSegment RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier ::= unquoted_identifier 
            {
              Id.NameSegment RESULT = null;

		// Default action for single-symbol production
		RESULT = (Id.NameSegment)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top)).value;
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unquoted_identifier ::= keyword 
            {
              Id.NameSegment RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id.NameSegment(i, Id.Quoting.UNQUOTED);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*unquoted_identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // unquoted_identifier ::= ID 
            {
              Id.NameSegment RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id.NameSegment(i, Id.Quoting.UNQUOTED);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*unquoted_identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // amp_quoted_identifier ::= AMP_QUOTED_ID 
            {
              Id.NameSegment RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id.NameSegment(i, Id.Quoting.KEY); // yuck
        
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*amp_quoted_identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // quoted_identifier ::= QUOTED_ID 
            {
              Id.NameSegment RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            RESULT = new Id.NameSegment(i, Id.Quoting.QUOTED);
        
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*quoted_identifier*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statement EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		QueryPart start_val = (QueryPart)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

